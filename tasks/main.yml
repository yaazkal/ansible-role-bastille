---
- name: "Installs Bastille using pkg"
  pkgng:
    name: bastille
    state: present
  when: bastille_version is not defined

- name: Installation of custom version from repo
  block:
    - name: "Removes Bastille if installed using pkg previously"
      pkgng:
        name: bastille
        state: absent

    - name: "Downloads custom version of Bastille"
      get_url:
        url: "https://github.com/BastilleBSD/bastille/archive/refs/tags/{{ bastille_version }}.tar.gz"
        dest: "/tmp/{{ bastille_version }}.tar.gz"

    - name: "Unpacks custom Bastille version"
      command: "tar -xzf /tmp/{{ bastille_version }}.tar.gz"
      args:
        chdir: "/tmp"
        creates: "/tmp/{{ bastille_version }}/Makefile"
        warn: false # We ignore the warning of using unarchive module since that module does not support bsdtar

    - name: "Installs custom Bastille version"
      command: "make install"
      args:
        chdir: "/tmp/bastille-{{ bastille_version }}"
        creates: "/usr/local/bin/bastille"
  when: bastille_version is defined

- name: "Configures bastille"
  template:
    src: usr/local/etc/bastille/bastille.conf.j2
    dest: /usr/local/etc/bastille/bastille.conf

- name: "Enables bastille service"
  lineinfile:
    path: /etc/rc.conf
    regexp: "^bastille_enable.+$"
    line: 'bastille_enable="YES"'

# Networking
- name: "Setup cloned interfaces"
  lineinfile:
    path: /etc/rc.conf
    regexp: "^cloned_interfaces.+$"
    line: 'cloned_interfaces="lo1"'

- name: "Setup lo1 interface name"
  lineinfile:
    path: /etc/rc.conf
    regexp: "^ifconfig_lo1_name.+$"
    line: 'ifconfig_lo1_name="bastille0"'

- name: "Starts the cloned interface"
  command: 'service netif cloneup'

- name: "Configures pf"
  template:
    src: etc/pf.conf.j2
    dest: /etc/pf.conf
  notify: restart pf

- name: "Enables pf service"
  lineinfile:
    path: /etc/rc.conf
    regexp: "^pf_enable.+$"
    line: 'pf_enable="YES"'

- name: "Start pf"
  service:
    name: pf
    state: started

# After starting pf the first time, the ssh connection is lost.
# Seems this wait_for_connection has no effect.
# TODO: Check if there is a better way to handle that disconnection
- name: "Wait for device"
  wait_for_connection:

# Bootstrapping releases
- name: "Bootstraps Releases"
  command: 'bastille bootstrap {{ item }} update'
  args:
    creates: "{{ bastille_prefix }}/releases/{{ item }}/COPYRIGHT"
  loop: "{{ bastille_releases }}"

- name: Bootstrapping templates
  block:
    - name: "Ensure git is installed in order to bootstrap templates"
      pkgng:
        name: git-lite
        state: present
    - name: "Bootstraps Templates"
      command: 'bastille bootstrap {{ item }}'
      loop: "{{ bastille_templates }}"
  when: bastille_templates is defined

- name: "Create jails"
  shell: bastille create {{ item.options | default('') }} {{ item.name }} {{ item.release }} {{ item.ip }} bastille0
  args:
    creates: "{{ bastille_prefix }}/jails/{{ item.name }}/root/COPYRIGHT"
  loop: "{{ bastille_jails }}"
  when: bastille_jails is defined

- name: "Apply templates to jails"
  command: bastille template {{ item.0.name|quote }} {{ item.1.template|quote }} {{ ['--arg']|product(item.1.args|default([])|map('quote'))|map('join', ' ')|join(' ') }}
  loop: "{{ bastille_jails | subelements('templates', skip_missing=True) }}"

